# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: neural_contract.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='neural_contract.proto',
  package='neuralstyle',
  syntax='proto3',
  serialized_pb=_b('\n\x15neural_contract.proto\x12\x0bneuralstyle\"+\n\tinput_img\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x10\n\x08\x61ws_link\x18\x02 \x01(\t\":\n\tstyle_img\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x10\n\x08\x61ws_link\x18\x02 \x01(\t\x12\r\n\x05style\x18\x03 \x01(\t2R\n\x10ImageStyleServer\x12>\n\nstyleImage\x12\x16.neuralstyle.input_img\x1a\x16.neuralstyle.style_img\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_INPUT_IMG = _descriptor.Descriptor(
  name='input_img',
  full_name='neuralstyle.input_img',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='neuralstyle.input_img.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aws_link', full_name='neuralstyle.input_img.aws_link', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=38,
  serialized_end=81,
)


_STYLE_IMG = _descriptor.Descriptor(
  name='style_img',
  full_name='neuralstyle.style_img',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='neuralstyle.style_img.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aws_link', full_name='neuralstyle.style_img.aws_link', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='style', full_name='neuralstyle.style_img.style', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=83,
  serialized_end=141,
)

DESCRIPTOR.message_types_by_name['input_img'] = _INPUT_IMG
DESCRIPTOR.message_types_by_name['style_img'] = _STYLE_IMG

input_img = _reflection.GeneratedProtocolMessageType('input_img', (_message.Message,), dict(
  DESCRIPTOR = _INPUT_IMG,
  __module__ = 'neural_contract_pb2'
  # @@protoc_insertion_point(class_scope:neuralstyle.input_img)
  ))
_sym_db.RegisterMessage(input_img)

style_img = _reflection.GeneratedProtocolMessageType('style_img', (_message.Message,), dict(
  DESCRIPTOR = _STYLE_IMG,
  __module__ = 'neural_contract_pb2'
  # @@protoc_insertion_point(class_scope:neuralstyle.style_img)
  ))
_sym_db.RegisterMessage(style_img)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ImageStyleServerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.styleImage = channel.unary_unary(
        '/neuralstyle.ImageStyleServer/styleImage',
        request_serializer=input_img.SerializeToString,
        response_deserializer=style_img.FromString,
        )


class ImageStyleServerServicer(object):

  def styleImage(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ImageStyleServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'styleImage': grpc.unary_unary_rpc_method_handler(
          servicer.styleImage,
          request_deserializer=input_img.FromString,
          response_serializer=style_img.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'neuralstyle.ImageStyleServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaImageStyleServerServicer(object):
  def styleImage(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaImageStyleServerStub(object):
  def styleImage(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  styleImage.future = None


def beta_create_ImageStyleServer_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('neuralstyle.ImageStyleServer', 'styleImage'): input_img.FromString,
  }
  response_serializers = {
    ('neuralstyle.ImageStyleServer', 'styleImage'): style_img.SerializeToString,
  }
  method_implementations = {
    ('neuralstyle.ImageStyleServer', 'styleImage'): face_utilities.unary_unary_inline(servicer.styleImage),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_ImageStyleServer_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('neuralstyle.ImageStyleServer', 'styleImage'): input_img.SerializeToString,
  }
  response_deserializers = {
    ('neuralstyle.ImageStyleServer', 'styleImage'): style_img.FromString,
  }
  cardinalities = {
    'styleImage': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'neuralstyle.ImageStyleServer', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
